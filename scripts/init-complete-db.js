import { MongoClient } from 'mongodb'

const DATABASE_URL = process.env.DATABASE_URL || 'mongodb://localhost:27017/eurotours'

async function initializeCompleteDatabase() {
  console.log('üöÄ Initializing complete EuroTours database with all cities...')
  
  const client = new MongoClient(DATABASE_URL)
  
  try {
    await client.connect()
    const db = client.db('eurotours')
    
    // Clear existing data
    console.log('üßπ Clearing existing data...')
    await Promise.all([
      db.collection('countries').deleteMany({}),
      db.collection('cities').deleteMany({}),
      db.collection('carriers').deleteMany({}),
      db.collection('routes').deleteMany({}),
      db.collection('searches').deleteMany({})
    ])
    
    // Create indexes
    console.log('üìö Creating database indexes...')
    await createIndexes(db)
    
    // Insert all countries
    console.log('üåç Inserting all countries...')
    await insertAllCountries(db)
    
    // Insert all cities
    console.log('üèôÔ∏è Inserting all cities...')
    await insertAllCities(db)
    
    // Insert carriers
    console.log('üöå Inserting carriers...')
    await insertCarriers(db)
    
    console.log('‚úÖ Complete database initialization completed!')
    
  } catch (error) {
    console.error('‚ùå Error initializing database:', error)
    throw error
  } finally {
    await client.close()
  }
}

async function createIndexes(db) {
  // Cities collection indexes
  await db.collection('cities').createIndex({ isActive: 1 })
  await db.collection('cities').createIndex({ countryId: 1 })
  await db.collection('cities').createIndex({ 
    "names.en": "text", 
    "names.cs": "text", 
    "names.bg": "text", 
    "names.ru": "text", 
    "names.uk": "text",
    "variations": "text"
  })

  // Routes collection indexes
  await db.collection('routes').createIndex({ searchId: 1 })
  await db.collection('routes').createIndex({ fromCityId: 1, toCityId: 1 })
  await db.collection('routes').createIndex({ departureTime: 1 })
  await db.collection('routes').createIndex({ isExternal: 1 })
  await db.collection('routes').createIndex({ carrierId: 1 })
  
  // TTL index - routes expire after 1 hour
  await db.collection('routes').createIndex(
    { createdAt: 1 }, 
    { expireAfterSeconds: 3600 }
  )

  // Searches collection indexes
  await db.collection('searches').createIndex({ fromCityId: 1, toCityId: 1 })
  
  // TTL index - searches expire after 24 hours
  await db.collection('searches').createIndex(
    { createdAt: 1 }, 
    { expireAfterSeconds: 86400 }
  )

  // Countries collection indexes
  await db.collection('countries').createIndex({ code: 1 })
  await db.collection('countries').createIndex({ isActive: 1 })

  // Carriers collection indexes
  await db.collection('carriers').createIndex({ code: 1 })
  await db.collection('carriers').createIndex({ isExternal: 1 })
  await db.collection('carriers').createIndex({ isActive: 1 })
}

async function insertAllCountries(db) {
  const countries = [
    // Original countries
    { id: 1, code: "CZ", names: { en: "Czech Republic", cs: "ƒåesk√° republika", bg: "–ß–µ—à–∫–∞ —Ä–µ–ø—É–±–ª–∏–∫–∞", ru: "–ß–µ—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", uk: "–ß–µ—Å—å–∫–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 2, code: "DE", names: { en: "Germany", cs: "Nƒõmecko", bg: "–ì–µ—Ä–º–∞–Ω–∏—è", ru: "–ì–µ—Ä–º–∞–Ω–∏—è", uk: "–ù—ñ–º–µ—á—á–∏–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 3, code: "AT", names: { en: "Austria", cs: "Rakousko", bg: "–ê–≤—Å—Ç—Ä–∏—è", ru: "–ê–≤—Å—Ç—Ä–∏—è", uk: "–ê–≤—Å—Ç—Ä—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 4, code: "PL", names: { en: "Poland", cs: "Polsko", bg: "–ü–æ–ª—à–∞", ru: "–ü–æ–ª—å—à–∞", uk: "–ü–æ–ª—å—â–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 5, code: "HU", names: { en: "Hungary", cs: "Maƒèarsko", bg: "–£–Ω–≥–∞—Ä–∏—è", ru: "–í–µ–Ω–≥—Ä–∏—è", uk: "–£–≥–æ—Ä—â–∏–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 6, code: "SK", names: { en: "Slovakia", cs: "Slovensko", bg: "–°–ª–æ–≤–∞–∫–∏—è", ru: "–°–ª–æ–≤–∞–∫–∏—è", uk: "–°–ª–æ–≤–∞—á—á–∏–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    
    // Additional countries
    { id: 7, code: "GB", names: { en: "United Kingdom", cs: "Velk√° Brit√°nie", bg: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", ru: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", uk: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 8, code: "BE", names: { en: "Belgium", cs: "Belgie", bg: "–ë–µ–ª–≥–∏—è", ru: "–ë–µ–ª—å–≥–∏—è", uk: "–ë–µ–ª—å–≥—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 9, code: "BY", names: { en: "Belarus", cs: "Bƒõlorusko", bg: "–ë–µ–ª–∞—Ä—É—Å", ru: "–ë–µ–ª–∞—Ä—É—Å—å", uk: "–ë—ñ–ª–æ—Ä—É—Å—å" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 10, code: "BG", names: { en: "Bulgaria", cs: "Bulharsko", bg: "–ë—ä–ª–≥–∞—Ä–∏—è", ru: "–ë–æ–ª–≥–∞—Ä–∏—è", uk: "–ë–æ–ª–≥–∞—Ä—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 11, code: "DK", names: { en: "Denmark", cs: "D√°nsko", bg: "–î–∞–Ω–∏—è", ru: "–î–∞–Ω–∏—è", uk: "–î–∞–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 12, code: "EE", names: { en: "Estonia", cs: "Estonsko", bg: "–ï—Å—Ç–æ–Ω–∏—è", ru: "–≠—Å—Ç–æ–Ω–∏—è", uk: "–ï—Å—Ç–æ–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 13, code: "FI", names: { en: "Finland", cs: "Finsko", bg: "–§–∏–Ω–ª–∞–Ω–¥–∏—è", ru: "–§–∏–Ω–ª—è–Ω–¥–∏—è", uk: "–§—ñ–Ω–ª—è–Ω–¥—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 14, code: "FR", names: { en: "France", cs: "Francie", bg: "–§—Ä–∞–Ω—Ü–∏—è", ru: "–§—Ä–∞–Ω—Ü–∏—è", uk: "–§—Ä–∞–Ω—Ü—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 15, code: "NL", names: { en: "Netherlands", cs: "Nizozemsko", bg: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∏—è", ru: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", uk: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 16, code: "HR", names: { en: "Croatia", cs: "Chorvatsko", bg: "–•—ä—Ä–≤–∞—Ç–∏—è", ru: "–•–æ—Ä–≤–∞—Ç–∏—è", uk: "–•–æ—Ä–≤–∞—Ç—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 17, code: "IT", names: { en: "Italy", cs: "It√°lie", bg: "–ò—Ç–∞–ª–∏—è", ru: "–ò—Ç–∞–ª–∏—è", uk: "–Ü—Ç–∞–ª—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 18, code: "LT", names: { en: "Lithuania", cs: "Litva", bg: "–õ–∏—Ç–≤–∞", ru: "–õ–∏—Ç–≤–∞", uk: "–õ–∏—Ç–≤–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 19, code: "LV", names: { en: "Latvia", cs: "Loty≈°sko", bg: "–õ–∞—Ç–≤–∏—è", ru: "–õ–∞—Ç–≤–∏—è", uk: "–õ–∞—Ç–≤—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 20, code: "LU", names: { en: "Luxembourg", cs: "Lucembursko", bg: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", ru: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", uk: "–õ—é–∫—Å–µ–º–±—É—Ä–≥" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 21, code: "MK", names: { en: "North Macedonia", cs: "Severn√≠ Makedonie", bg: "–°–µ–≤–µ—Ä–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—è", ru: "–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è", uk: "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 22, code: "MD", names: { en: "Moldova", cs: "Moldavsko", bg: "–ú–æ–ª–¥–æ–≤–∞", ru: "–ú–æ–ª–¥–æ–≤–∞", uk: "–ú–æ–ª–¥–æ–≤–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 23, code: "NO", names: { en: "Norway", cs: "Norsko", bg: "–ù–æ—Ä–≤–µ–≥–∏—è", ru: "–ù–æ—Ä–≤–µ–≥–∏—è", uk: "–ù–æ—Ä–≤–µ–≥—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 24, code: "RO", names: { en: "Romania", cs: "Rumunsko", bg: "–†—É–º—ä–Ω–∏—è", ru: "–†—É–º—ã–Ω–∏—è", uk: "–†—É–º—É–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 25, code: "RU", names: { en: "Russia", cs: "Rusko", bg: "–†—É—Å–∏—è", ru: "–†–æ—Å—Å–∏—è", uk: "–†–æ—Å—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 26, code: "GR", names: { en: "Greece", cs: "≈òecko", bg: "–ì—ä—Ä—Ü–∏—è", ru: "–ì—Ä–µ—Ü–∏—è", uk: "–ì—Ä–µ—Ü—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 27, code: "RS", names: { en: "Serbia", cs: "Srbsko", bg: "–°—ä—Ä–±–∏—è", ru: "–°–µ—Ä–±–∏—è", uk: "–°–µ—Ä–±—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 28, code: "ES", names: { en: "Spain", cs: "≈†panƒõlsko", bg: "–ò—Å–ø–∞–Ω–∏—è", ru: "–ò—Å–ø–∞–Ω–∏—è", uk: "–Ü—Å–ø–∞–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 29, code: "SE", names: { en: "Sweden", cs: "≈†v√©dsko", bg: "–®–≤–µ—Ü–∏—è", ru: "–®–≤–µ—Ü–∏—è", uk: "–®–≤–µ—Ü—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 30, code: "CH", names: { en: "Switzerland", cs: "≈†v√Ωcarsko", bg: "–®–≤–µ–π—Ü–∞—Ä–∏—è", ru: "–®–≤–µ–π—Ü–∞—Ä–∏—è", uk: "–®–≤–µ–π—Ü–∞—Ä—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 31, code: "TR", names: { en: "Turkey", cs: "Turecko", bg: "–¢—É—Ä—Ü–∏—è", ru: "–¢—É—Ä—Ü–∏—è", uk: "–¢—É—Ä–µ—á—á–∏–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 32, code: "UA", names: { en: "Ukraine", cs: "Ukrajina", bg: "–£–∫—Ä–∞–π–Ω–∞", ru: "–£–∫—Ä–∞–∏–Ω–∞", uk: "–£–∫—Ä–∞—ó–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 33, code: "SI", names: { en: "Slovenia", cs: "Slovinsko", bg: "–°–ª–æ–≤–µ–Ω–∏—è", ru: "–°–ª–æ–≤–µ–Ω–∏—è", uk: "–°–ª–æ–≤–µ–Ω—ñ—è" }, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 34, code: "BA", names: { en: "Bosnia and Herzegovina", cs: "Bosna a Hercegovina", bg: "–ë–æ—Å–Ω–∞ –∏ –•–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞", ru: "–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞", uk: "–ë–æ—Å–Ω—ñ—è —ñ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞" }, isActive: true, createdAt: new Date(), updatedAt: new Date() }
  ]

  await db.collection('countries').insertMany(countries)
  console.log(`‚úÖ Inserted ${countries.length} countries`)
}

async function insertAllCities(db) {
  let cityId = 1
  
  const cityMappings = {
    // Czech Republic (1)
    1: ["Ostrava", "Fr√Ωdek-M√≠stek", "Brno", "Praha", "Nov√Ω Jiƒç√≠n", "Olomouc", "Plze≈à", "Hradec Kr√°lov√©", "√öst√≠ nad Labem", "Znojmo", "Karlovy Vary", "Jiƒç√≠n", "Mlad√° Boleslav", "B√≠l√°", "ƒåesk√© Budƒõjovice", "P≈ô√≠bram", "Dob≈ô√≠≈°", "Uhersk√Ω Brod", "Uhersk√© Hradi≈°tƒõ", "Vala≈°sk√© Mezi≈ô√≠ƒç√≠", "Liberec", "Prostƒõjov", "Kolin", "Jihlava", "Humpolec", "Cheb", "Nachod", "ƒåesk√Ω Krumlov", "Jablonec n. Nisou", "≈Ωelezn√Ω Brod", "Turnov", "Chomutov", "Louny", "Slany", "Benesov", "Rokycany", "Pardubice", "Pisek", "Vernovice", "Kladno", "Podebrady", "Vysok√© M√Ωto", "Teplice", "B≈ôeclav"],
    
    // Germany (2)
    2: ["Regensburg", "Munich", "Augsburg", "Gunzburg", "Ulm", "Stuttgart", "Dresden", "Berlin", "Nurnberg", "Frankfurt", "Koln", "Aachen", "Hamburg", "Hannover", "Leipzig", "Rostock", "Karlsruhe", "Freiburg", "Heidelberg", "Ingolstadt", "Mannheim", "Saarbr√ºcken", "Magdeburg", "Wolfsburg", "Aschaffenburg", "Bremen", "Mainz", "Koblenz", "Bonn", "Dusseldorf", "Wurzburg", "Kassel", "Dortmund", "Gottingen", "Essen", "Solingen", "Halle", "Braunschweig", "Memmingen", "Lindau", "Chemnitz", "Gera", "Jena", "Weimar", "Erfurt", "Eisenach", "Wiesbaden", "Erlangen", "Lubbenau", "Krausnick", "Potsdam", "Oldenburg", "Warnemunde", "Bad Oeynhausen", "Osnabruck", "Bielefeld", "Marienberg", "Zschopau", "Wehretal-Oetmannshausen", "Hessisch Lichtenau", "Bochum", "Marktredwitz", "Bischofsgrun", "Bayreuth", "Bamberg", "Schweinfurt", "Flensburg", "Ludwigshafen", "Heilbronn", "Leverkusen", "Hollfeld", "Tubingen", "Kornwestheim", "Gotha", "Salzgitter", "Hildesheim", "Amberg", "Ansbach", "Aalen", "Bad Urach", "Bansin", "Barsinghausen", "Bastogne", "Bautzen", "Beelen", "Bergen auf R√ºgen", "Berchtesgaden", "Bergen", "Bensersiel", "Bernau am Chiemsee", "Bernburg", "Beverstedt", "Bestwig", "Biberach", "Binz", "Bischofswiesen", "Bischofgrun", "Bispingen", "Bitburg", "Blankenburg", "Bocholt", "Born", "Borken", "Duisburg", "Munster", "Offenburg", "Paderborn", "Passau", "Pforzheim", "Villach", "Hof"],
    
    // Austria (3)
    3: ["Wien", "Salzburg", "Innsbruck", "Linz", "Graz", "Bludenz", "Bregenz"],
    
    // Poland (4)
    4: ["Wroclaw", "Lodz", "Warszawa", "Bialystok", "Suwalki", "Ostrow Mazowiecka", "Augustow", "Krakow", "Czestochowa", "Gdynia", "Gdansk", "Przemysl", "Gorzow Wielkopolski", "Ostrow Wielkopolski", "Poznan", "Leszno", "Katowice", "Opole", "Klodzko", "Kielce", "Gliwice", "Bydgoszcz", "Torun", "Radom", "Lublin", "Tarnow", "Rzeszow", "Grudziad", "Zdunska Wola", "Kepno", "Jaroslaw", "Przeworsk", "Debica", "Nysa", "Kalisz", "Sieradz", "Swiebodzin", "Zielona Gora", "≈Ωary", "≈Ωagan", "Polkowice", "Swiebodzice", "Dzierzoniow", "Zabkowice Slaskie", "Lubin", "Jelenia Gora", "Bochnia", "Brzesko", "Pilzno", "Ropczyce", "Lancut", "Jedrzejow", "Skarzysko Kamienna", "Pulawy", "Lubliniec", "Radomsko", "Lowicz", "Lomza", "Grajewo", "Gniezno", "Limanowa", "Nowy Sacz", "Gorlice", "Sochaczew", "Jaslo", "Krosno", "Sanok", "Legnica", "Szczecin", "Bogatynia", "Zgorzelec", "Boleslawiec", "Gorzyczki", "Korczowa", "Krakovets", "Bielsko-Biala"],
    
    // Hungary (5)
    5: ["Gy√∂r", "Budapest", "Szeged"],
    
    // Slovakia (6) 
    6: ["Bratislava", "Hanu≈°ovce n. T.", "≈†trba", "Makov", "Trenƒç√≠n", "Dubnica nad V√°hom", "Pova≈æsk√° Bystrica", "Kraƒæovany", "Ru≈æomberok", "Poprad", "Pre≈°ov", "Vranov nad Topƒæou", "Stra≈æsk√©", "Michalovce", "Humenn√©", "Snina", "Spi≈°ska Nov√° ves", "Levoƒça", "Ko≈°ice", "Liptovsk√Ω Mikul√°≈°", "≈Ωilina", "Ro≈æ≈àava", "≈†t√≠tnik", "Jel≈°ava", "Rev√∫ca", "Mur√°≈à", "Tisovec", "Brezno", "Bansk√° Bystrica", "Zvolen", "≈Ωiar n. Hronom", "Handlov√°", "Prievidza", "B√°novce n. B.", "Sabinov", "Lipany", "ƒΩubotin", "Star√° ƒΩubov≈àa", "Podolinec", "Ke≈æmarok", "Seƒçovce", "Rimavsk√° Sobota", "Luƒçenec", "Nitra", "Trnava", "Sereƒè", "Zlat√© Moravce", "Nov√° Ba≈àa", "≈Ωarnovica", "Nov√© Mesto n. V.", "Pie≈°≈•any", "Topolƒçany", "Partiz√°nsk√©", "Ha≈æ√≠n nad Cirochou", "Kamenica nad Cirochou", "Modr√° nad Cirochou", "Dlh√© nad Cirochou", "Bel√° nad Cirochou", "Vr√∫tky", "Bardƒõjov", "Svidnik", "Stropkov", "Giraltovce", "Martin", "Sobrance"],
    
    // United Kingdom (7)
    7: ["Dover", "London", "Bradford", "Leicester", "Sheffield", "Rotherham", "Peterborough", "Birmingham", "Derby", "Nottingham", "Manchester", "Chatham", "Luton", "Corby"],
    
    // Belgium (8)
    8: ["Liege", "Brussels", "Antwerp", "Ghent", "Bruges"],
    
    // Belarus (9)
    9: ["Grodno", "Lida", "Minsk", "Brest", "Baranovichy", "Orsha", "Vitebsk"],
    
    // Bulgaria (10)
    10: ["Sofia", "Varna", "Pazardzhik", "Plovdiv", "Stara Zagora", "Ruse", "Shumen", "Razgrad", "Burgas", "Sozopol", "Primorsko", "Kiten", "Ahtopol", "Sinemorec", "Carevo", "Nesebar", "Slanchev Briag", "Zlatni piasaci", "Balchik", "Sliven", "Dobrich", "Haskovo", "Chernomorec", "Lozenec", "Pomorie", "Ravda", "Sveti Vlas", "Obzor", "Albena", "Kavarna", "Shabla", "Veliko Tarnovo", "Aytos", "Karnobat", "Dimitrovgrad"],
    
    // Denmark (11)
    11: ["Rodby", "Nykobing", "Copenhagen", "Tapernoje", "Ringsted", "Slagelse", "Nyborg", "Odense", "Vejle", "Horsens", "Aarhus", "Aalborg"],
    
    // Estonia (12)
    12: ["Parnu", "Tallinn", "Valga", "Tartu", "Narva", "Kohtla Jarve"],
    
    // Finland (13)
    13: ["Turku", "Helsinki"],
    
    // France (14)
    14: ["Chambery", "Toulon", "Bordeaux", "Lille", "Perpignan", "Strasbourg", "Dijon", "Chalon-S-Saone", "Lyon", "Grenoble", "Valence", "Avignon", "Aix-en-Provence", "Marseille", "Nimes", "Montpellier", "Nancy", "Reims", "Paris", "Orleans", "Tours", "Angers", "Nantes", "Rouen", "Caen", "Rennes", "Metz", "Mulhouse", "Belfort", "Besancon", "Saint Etienne", "Clermond-Ferand", "Nice", "Annemasse", "Annecy", "Beziers", "Narbonne", "Carcassonne", "Toulouse", "Tarbes", "Pau", "Orthez", "Bayonne", "Le Cannet", "Puget Sur Argents", "Givors", "Ussel", "Tulle", "Brive", "Perigueux", "Poitiers", "Swindon", "Bristol", "Newport", "Saint Gaudens", "Le Havre", "Chessy", "Le Mans", "Saint-Brieuc", "Limoges", "Brive-La-Gaillarde", "Bapaume", "Beaune", "Beausoleil", "Beauval", "Bellegarde-sur-Valserine", "Bergerac", "Biarritz", "Blois", "Bollene", "Cannes"],
    
    // Netherlands (15)
    15: ["Lisse", "Eindhoven", "Arnhem", "Utrecht", "Amsterdam", "Den Haag", "Rotterdam", "Venlo", "Breda", "Enschede", "Nijmegen", "Bergen op Zoom", "Borger", "Maastricht"],
    
    // Croatia (16)
    16: ["Rijeka", "Opatija", "Rovinj", "Pula", "Crikvenica", "Malinska", "Krk", "Ba≈°ka", "Karlovac", "Plitviƒçka Jezera", "Zagreb", "Zadar", "≈†ibenik", "Primo≈°ten", "Trogir", "Split", "Omi≈°", "Makarska", "Tuƒçepi", "Podgora", "Drvenik", "Gradac", "Ploƒçe", "Dubrovnik", "Bibinje", "Sukosan", "Sveti Petar na Moru", "Sveti Filip i Jakov", "Biograd n. M.", "Pakostane", "Drage", "Pirovac", "Tribunj", "Vodice", "Brodarica", "Zaboric", "Bilo", "Dolac", "Rogoznica", "Podstrana", "Jesenice", "Dugi Rat", "Duce", "Stanici", "Ruskamen", "Mimice", "Pisak", "Brela", "Baska Voda", "Promajna", "Drasnice", "Igrane", "Zivogosce", "Zaostrog", "Podaca", "Brist", "Slano", "Barban", "Bedenica", "Benkovac", "Poreƒç"],
    
    // Italy (17)
    17: ["Genova", "Udine", "Mestre", "Venezia", "Padova", "Bologna", "Firenze", "Pisa", "Livorno", "Roma", "Napoli", "Bolzano", "Trento", "Verona", "Brescia", "Milano", "Lugano", "Como", "Torino", "Parma", "Rimini", "Pesaro", "Ancona", "Civitanova Marche", "Porto San Giorgio", "Porto DAscoli", "Giulianova", "Teramo", "Val Vomano", "LAquila", "Avezzano", "Sora", "Cassino", "Caserta", "Bardonecchia", "Bari", "Barletta", "Battipaglia", "Bellaria Igea Marina", "Belluno", "Benevento", "Bergamo", "Bisceglie", "Bitonto", "Borca di Cadore", "Pescara", "Perugia", "Ravenna", "Riccione", "San Benedetto del Tronto", "Trieste"],
    
    // Lithuania (18)
    18: ["Marijampole", "Kaunas", "Vilnius", "Panevezys", "Zarasai", "Utena", "Klaipeda", "Palanga", "Siauliai"],
    
    // Latvia (19)
    19: ["Riga", "Liepaja", "Jelgava", "Rezekne", "Valmiera", "Daugavpils", "Bauska"],
    
    // Luxembourg (20)
    20: ["Luxembourg"],
    
    // North Macedonia (21)
    21: ["Skopje", "Kumanovo"],
    
    // Moldova (22)
    22: ["Balti", "Kishinev", "Cimislia", "Comrat", "Ceadir-Lunga", "Orhei", "Singerei", "Riscani", "Leuseni", "Tiraspol", "Bender", "Hincesti", "Congaz"],
    
    // Norway (23)
    23: ["Sarpsborg", "Oslo", "Moss"],
    
    // Romania (24)
    24: ["Arad", "Timisoara", "Lugoj", "Deva", "Sebes", "Sibiu", "Fagaras", "Brasov", "Ploiesti", "Bucuresti", "Adjud", "Barlad", "Husi", "Salonta", "Zalau", "Carei", "Satu Mare", "Baia Mare", "Sighetul Marmatei", "Faget", "Resita", "Caransebes", "Baile Herculane", "Orsova", "Turnu Severin", "Lipova", "Hunedoara", "Petrosani", "Bumbesti Jiu", "Tg. Jiu", "Rovinari", "Filiasi", "Craiova", "Bals", "Slatina", "Orastie", "Alba Iulia", "Teius", "Aiud", "Turda", "Dej", "Bistrita", "Talmaciu", "Ramnicu Valcea", "Targoviste", "Medias", "Sighisoara", "Targu Mures", "Sfantul Gheorghe", "Targu Secuiesc", "Onesti", "Bacau", "Buhusi", "Piatra Neamt", "Targu Neamt", "Suceava", "Botosani", "Buzau", "Ramnicu Sarat", "Focsani", "Tecuci", "Vaslui", "Iasi", "Oltenita", "Calarasi", "Slobozia", "Braila", "Galati", "Fetesti", "Constanta", "Tulcea", "Pitesti", "Oradea", "Huedin", "Cluj Napoca", "Torda", "Marosludas", "Radnot", "Sovata", "Parajd", "Odorheiu Secuiesc", "Miercurea Ciuc", "Mizil", "Medgidia", "Cernavoda", "Urziceni", "Falticeni", "Pascani", "Roman", "Horezu", "Hateg", "Otelu Rosu", "Sinicolau Mare", "Toplita", "Reghin", "Herculane", "Sannicolau Mare", "Sinaia", "Giurgiu", "Vatra Dornei", "Gura Humorului", "Beclean", "Nadlac"],
    
    // Russia (25)
    25: ["Moskva", "St. Peterburg", "Ostrov", "Pskov", "Luga", "Kaliningrad", "Novgorod"],
    
    // Greece (26)
    26: ["Thessaloniki", "Athens", "Katerini", "Larissa", "Lamia", "Piraeus"],
    
    // Serbia (27)
    27: ["Novi Sad", "Beograd", "Subotica"],
    
    // Spain (28)
    28: ["Figueres", "Girona", "Lloret de Mar", "Barcelona", "Tarragona", "Salou", "Alcal√° de Chivert", "Castell√≥n", "Valencia", "Benidorm", "Alicante", "Murcia", "Lleida", "Zaragoza", "Madrid", "Irun", "San Sebastian", "Bilbao", "Burgos", "Valladolid", "Tordesillas", "Lorca", "Puerto Lumbreras", "Baza", "Guadix", "Granada", "Malaga", "Lerida", "Bailen", "Jaen", "Cordoba", "Lucena", "Bejar", "Plasencia", "Caceres", "Merida", "Zafra", "Sevilla", "Jerez", "Cadiz", "Vejer", "Tarifa", "Algeciras", "Benavente", "Blanes"],
    
    // Sweden (29)
    29: ["Malm√∂", "Lund", "Jonk√∂ping", "Link√∂ping", "Stockholm", "Uppsala", "Helsingborg", "Halmstad", "Varberg", "Goteborg", "Uddevalla", "Norrkoping", "Nykoping", "Sodertalje", "Ljungby", "Vasteras", "Orebro", "Varnamo", "Landskrona", "Vaxjo", "Boras"],
    
    // Switzerland (30)
    30: ["St. Gallen", "Zurich", "Bern", "Lausanne", "Geneve", "Luzern", "Basel", "Fribourg", "Bulle", "Bellinzona", "Winterthur"],
    
    // Turkey (31)
    31: ["Istanbul"],
    
    // Ukraine (32)
    32: ["Lvov", "Ternopil", "Chmelnickij", "Vinnica", "Uman", "Kropyvnitskyi", "Dnipro", "Zaporozje", "Doneck", "Boryspil", "Pyriatyn", "Lubny", "Poltava", "Kharkiv", "Zolochiv", "Terebovlya", "Chortkiv", "Kamianets Podilskiy", "Stryj", "Dolina", "Kalu≈°", "Ivano Frankivsk", "Nadvirna", "Deljatin", "Rachiv", "Odesa", "Nikolaev", "Cherson", "Rivne", "Zitomir", "Kiev", "ƒåerkasy", "Luck", "Kovel", "U≈æhorod", "Mukaƒçevo", "Ir≈°ava", "Chust", "Tjaƒçiv", "Vinohradovo", "Bolechiv", "ƒåernovcy", "Kolomyja", "Sniatyn", "Mizhgirya", "Rohatin", "Kryvyj Rih", "Gorodenka", "Brody", "Sarny", "Korosten", "Oleksandriia", "Pyatikhatky", "Krasnohrad", "Beregovo", "Vylok", "Bushtyno", "Drahovo", "Yaremche", "Yasinya", "Dubno", "Bohorodcany", "Lanchyn", "Velykyi Bychkiv", "Svaljava", "Nizhni Vorota", "Pervomaisk", "Truskavets", "Drohobych", "Zalishchyky", "Dubove", "Nova Kachovka", "Berdansk", "Mariupol", "Melitopol", "Kosiv", "Tovste", "Sambir", "Kremenchuk", "Novovolinsk", "Vladimir Volynskiy", "Kamianske", "Tlumach", "Letychiv", "Nemyriv", "Haisyn", "Koblevo", "Pryluky", "Romny", "Nedryhailiv", "Sumy", "Yuzhnoukrainsk", "Voznesensk", "Chop", "Novohrad-Volynskyi", "Stebnyk", "Busk", "Chmilnik", "Volochisk", "Kryve Ozero", "Pereiaslav", "Zolotonosha", "Smila", "Chernihiv", "Zhashkiv", "Golovanivsk", "Talne", "Zvenigorodka", "Shpola", "Nova Odesa", "Synevyr", "Aleksandrivka", "Khorol", "Shepetivka", "Bila Tserkva", "Skvyra", "Popilnya", "Silce", "Hotyn", "Kagarlik", "Korsun Shevchenkivsky", "Horodyshche", "Volovets", "Solotvyno", "Izmajil", "Sarata", "Tatarbunary", "Buchach", "Oleksandriia", "Nyzhni Vorota", "Teresva", "Skole", "Slavjansk", "Pokrovsk", "Kramatorsk", "Zvyahel", "Vy≈ænycja", "Storozhynets", "Chutove", "Zabolotiv", "Lokhvytsia", "Zboriv", "Valky", "Burshtyn"],
    
    // Slovenia (33)
    33: ["Maribor", "Bled", "Ljubljana"],
    
    // Bosnia and Herzegovina (34)
    34: ["Sarajevo"]
  }
  
  // Helper function to insert cities for a country
  async function insertCountryCities(countryId, cityNames) {
    if (!cityNames || cityNames.length === 0) return
    
    const cities = cityNames.map(cityName => ({
      id: cityId++,
      countryId,
      names: {
        en: cityName,
        cs: cityName,
        bg: cityName,
        ru: cityName,
        uk: cityName
      },
      variations: [],
      isActive: true,
      latitude: null,
      longitude: null,
      createdAt: new Date(),
      updatedAt: new Date()
    }))
    
    await db.collection('cities').insertMany(cities)
    const countryInfo = await db.collection('countries').findOne({ id: countryId })
    console.log(`‚úÖ Inserted ${cities.length} cities for ${countryInfo?.names?.en || 'Unknown'}`)
  }
  
  // Insert cities for each country
  for (const [countryId, cities] of Object.entries(cityMappings)) {
    await insertCountryCities(parseInt(countryId), cities)
  }
  
  console.log(`Total cities inserted: ${cityId - 1}`)
}

async function insertCarriers(db) {
  const carriers = [
    { id: 1, code: "FB", name: "FlixBus", isExternal: true, logoUrl: "https://www.flixbus.com/assets/images/logo.svg", website: "https://www.flixbus.com", isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 2, code: "BLA", name: "BlaBlaCar Bus", isExternal: true, logoUrl: "https://www.blablacar.com/images/logo.svg", website: "https://www.blablacar.com", isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 3, code: "ECO", name: "Ecolines", isExternal: true, logoUrl: null, website: "https://www.ecolines.net", isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 4, code: "SA", name: "Student Agency", isExternal: true, logoUrl: null, website: "https://www.studentagency.eu", isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 5, code: "EE", name: "East Express", isExternal: true, logoUrl: null, website: "http://www.east-express.cz", isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: 6, code: "ET", name: "EuroTours", isExternal: false, logoUrl: null, website: null, isActive: true, createdAt: new Date(), updatedAt: new Date() }
  ]

  await db.collection('carriers').insertMany(carriers)
  console.log(`‚úÖ Inserted ${carriers.length} carriers`)
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}` || process.argv[1].includes('init-complete-db.js')) {
  initializeCompleteDatabase()
    .then(() => {
      console.log('üéâ Complete database initialization completed successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Complete database initialization failed:', error)
      process.exit(1)
    })
}

export { initializeCompleteDatabase } 