import { MongoClient } from 'mongodb'

const DATABASE_URL = process.env.DATABASE_URL || 'mongodb://localhost:27017/eurotours'

async function initializeDatabase() {
  console.log('üöÄ Initializing EuroTours database...')
  
  const client = new MongoClient(DATABASE_URL)
  
  try {
    await client.connect()
    const db = client.db('eurotours')
    
    // Clear existing data
    console.log('üßπ Clearing existing data...')
    await Promise.all([
      db.collection('countries').deleteMany({}),
      db.collection('cities').deleteMany({}),
      db.collection('carriers').deleteMany({}),
      db.collection('routes').deleteMany({}),
      db.collection('searches').deleteMany({})
    ])
    
    // Create indexes
    console.log('üìö Creating database indexes...')
    await createIndexes(db)
    
    // Insert sample countries
    console.log('üåç Inserting countries...')
    await insertCountries(db)
    
    // Insert sample cities
    console.log('üèôÔ∏è Inserting cities...')
    await insertCities(db)
    
    // Insert carriers
    console.log('üöå Inserting carriers...')
    await insertCarriers(db)
    
    console.log('‚úÖ Database initialization completed!')
    
  } catch (error) {
    console.error('‚ùå Error initializing database:', error)
    throw error
  } finally {
    await client.close()
  }
}

async function createIndexes(db) {
  // Cities collection indexes
  await db.collection('cities').createIndex({ isActive: 1 })
  await db.collection('cities').createIndex({ countryId: 1 })
  await db.collection('cities').createIndex({ 
    "names.en": "text", 
    "names.cs": "text", 
    "names.bg": "text", 
    "names.ru": "text", 
    "names.uk": "text",
    "variations": "text"
  })

  // Routes collection indexes
  await db.collection('routes').createIndex({ searchId: 1 })
  await db.collection('routes').createIndex({ fromCityId: 1, toCityId: 1 })
  await db.collection('routes').createIndex({ departureTime: 1 })
  await db.collection('routes').createIndex({ isExternal: 1 })
  await db.collection('routes').createIndex({ carrierId: 1 })
  
  // TTL index - routes expire after 1 hour
  await db.collection('routes').createIndex(
    { createdAt: 1 }, 
    { expireAfterSeconds: 3600 }
  )

  // Searches collection indexes
  await db.collection('searches').createIndex({ fromCityId: 1, toCityId: 1 })
  
  // TTL index - searches expire after 24 hours
  await db.collection('searches').createIndex(
    { createdAt: 1 }, 
    { expireAfterSeconds: 86400 }
  )

  // Countries collection indexes
  await db.collection('countries').createIndex({ code: 1 })
  await db.collection('countries').createIndex({ isActive: 1 })

  // Carriers collection indexes
  await db.collection('carriers').createIndex({ code: 1 })
  await db.collection('carriers').createIndex({ isExternal: 1 })
  await db.collection('carriers').createIndex({ isActive: 1 })
}

async function insertCountries(db) {
  const countries = [
    {
      id: 1,
      code: "CZ",
      names: {
        en: "Czech Republic",
        cs: "ƒåesk√° republika",
        bg: "–ß–µ—à–∫–∞ —Ä–µ–ø—É–±–ª–∏–∫–∞",
        ru: "–ß–µ—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
        uk: "–ß–µ—Å—å–∫–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 2,
      code: "DE",
      names: {
        en: "Germany",
        cs: "Nƒõmecko",
        bg: "–ì–µ—Ä–º–∞–Ω–∏—è",
        ru: "–ì–µ—Ä–º–∞–Ω–∏—è",
        uk: "–ù—ñ–º–µ—á—á–∏–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 3,
      code: "AT",
      names: {
        en: "Austria",
        cs: "Rakousko",
        bg: "–ê–≤—Å—Ç—Ä–∏—è",
        ru: "–ê–≤—Å—Ç—Ä–∏—è",
        uk: "–ê–≤—Å—Ç—Ä—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 4,
      code: "PL",
      names: {
        en: "Poland",
        cs: "Polsko",
        bg: "–ü–æ–ª—à–∞",
        ru: "–ü–æ–ª—å—à–∞",
        uk: "–ü–æ–ª—å—â–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 5,
      code: "HU",
      names: {
        en: "Hungary",
        cs: "Maƒèarsko",
        bg: "–£–Ω–≥–∞—Ä–∏—è",
        ru: "–í–µ–Ω–≥—Ä–∏—è",
        uk: "–£–≥–æ—Ä—â–∏–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 6,
      code: "SK",
      names: {
        en: "Slovakia",
        cs: "Slovensko",
        bg: "–°–ª–æ–≤–∞–∫–∏—è",
        ru: "–°–ª–æ–≤–∞–∫–∏—è",
        uk: "–°–ª–æ–≤–∞—á—á–∏–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Additional countries
    {
      id: 7,
      code: "GB",
      names: {
        en: "United Kingdom",
        cs: "Velk√° Brit√°nie",
        bg: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        ru: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        uk: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 8,
      code: "BE",
      names: {
        en: "Belgium",
        cs: "Belgie",
        bg: "–ë–µ–ª–≥–∏—è",
        ru: "–ë–µ–ª—å–≥–∏—è",
        uk: "–ë–µ–ª—å–≥—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 9,
      code: "BY",
      names: {
        en: "Belarus",
        cs: "Bƒõlorusko",
        bg: "–ë–µ–ª–∞—Ä—É—Å",
        ru: "–ë–µ–ª–∞—Ä—É—Å—å",
        uk: "–ë—ñ–ª–æ—Ä—É—Å—å"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 10,
      code: "BG",
      names: {
        en: "Bulgaria",
        cs: "Bulharsko",
        bg: "–ë—ä–ª–≥–∞—Ä–∏—è",
        ru: "–ë–æ–ª–≥–∞—Ä–∏—è",
        uk: "–ë–æ–ª–≥–∞—Ä—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 11,
      code: "DK",
      names: {
        en: "Denmark",
        cs: "D√°nsko",
        bg: "–î–∞–Ω–∏—è",
        ru: "–î–∞–Ω–∏—è",
        uk: "–î–∞–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 12,
      code: "EE",
      names: {
        en: "Estonia",
        cs: "Estonsko",
        bg: "–ï—Å—Ç–æ–Ω–∏—è",
        ru: "–≠—Å—Ç–æ–Ω–∏—è",
        uk: "–ï—Å—Ç–æ–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 13,
      code: "FI",
      names: {
        en: "Finland",
        cs: "Finsko",
        bg: "–§–∏–Ω–ª–∞–Ω–¥–∏—è",
        ru: "–§–∏–Ω–ª—è–Ω–¥–∏—è",
        uk: "–§—ñ–Ω–ª—è–Ω–¥—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 14,
      code: "FR",
      names: {
        en: "France",
        cs: "Francie",
        bg: "–§—Ä–∞–Ω—Ü–∏—è",
        ru: "–§—Ä–∞–Ω—Ü–∏—è",
        uk: "–§—Ä–∞–Ω—Ü—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 15,
      code: "NL",
      names: {
        en: "Netherlands",
        cs: "Nizozemsko",
        bg: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∏—è",
        ru: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
        uk: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 16,
      code: "HR",
      names: {
        en: "Croatia",
        cs: "Chorvatsko",
        bg: "–•—ä—Ä–≤–∞—Ç–∏—è",
        ru: "–•–æ—Ä–≤–∞—Ç–∏—è",
        uk: "–•–æ—Ä–≤–∞—Ç—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 17,
      code: "IT",
      names: {
        en: "Italy",
        cs: "It√°lie",
        bg: "–ò—Ç–∞–ª–∏—è",
        ru: "–ò—Ç–∞–ª–∏—è",
        uk: "–Ü—Ç–∞–ª—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 18,
      code: "LT",
      names: {
        en: "Lithuania",
        cs: "Litva",
        bg: "–õ–∏—Ç–≤–∞",
        ru: "–õ–∏—Ç–≤–∞",
        uk: "–õ–∏—Ç–≤–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 19,
      code: "LV",
      names: {
        en: "Latvia",
        cs: "Loty≈°sko",
        bg: "–õ–∞—Ç–≤–∏—è",
        ru: "–õ–∞—Ç–≤–∏—è",
        uk: "–õ–∞—Ç–≤—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 20,
      code: "LU",
      names: {
        en: "Luxembourg",
        cs: "Lucembursko",
        bg: "–õ—é–∫—Å–µ–º–±—É—Ä–≥",
        ru: "–õ—é–∫—Å–µ–º–±—É—Ä–≥",
        uk: "–õ—é–∫—Å–µ–º–±—É—Ä–≥"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 21,
      code: "MK",
      names: {
        en: "North Macedonia",
        cs: "Severn√≠ Makedonie",
        bg: "–°–µ–≤–µ—Ä–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—è",
        ru: "–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è",
        uk: "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 22,
      code: "MD",
      names: {
        en: "Moldova",
        cs: "Moldavsko",
        bg: "–ú–æ–ª–¥–æ–≤–∞",
        ru: "–ú–æ–ª–¥–æ–≤–∞",
        uk: "–ú–æ–ª–¥–æ–≤–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 23,
      code: "NO",
      names: {
        en: "Norway",
        cs: "Norsko",
        bg: "–ù–æ—Ä–≤–µ–≥–∏—è",
        ru: "–ù–æ—Ä–≤–µ–≥–∏—è",
        uk: "–ù–æ—Ä–≤–µ–≥—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 24,
      code: "RO",
      names: {
        en: "Romania",
        cs: "Rumunsko",
        bg: "–†—É–º—ä–Ω–∏—è",
        ru: "–†—É–º—ã–Ω–∏—è",
        uk: "–†—É–º—É–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 25,
      code: "RU",
      names: {
        en: "Russia",
        cs: "Rusko",
        bg: "–†—É—Å–∏—è",
        ru: "–†–æ—Å—Å–∏—è",
        uk: "–†–æ—Å—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 26,
      code: "GR",
      names: {
        en: "Greece",
        cs: "≈òecko",
        bg: "–ì—ä—Ä—Ü–∏—è",
        ru: "–ì—Ä–µ—Ü–∏—è",
        uk: "–ì—Ä–µ—Ü—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 27,
      code: "RS",
      names: {
        en: "Serbia",
        cs: "Srbsko",
        bg: "–°—ä—Ä–±–∏—è",
        ru: "–°–µ—Ä–±–∏—è",
        uk: "–°–µ—Ä–±—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 28,
      code: "ES",
      names: {
        en: "Spain",
        cs: "≈†panƒõlsko",
        bg: "–ò—Å–ø–∞–Ω–∏—è",
        ru: "–ò—Å–ø–∞–Ω–∏—è",
        uk: "–Ü—Å–ø–∞–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 29,
      code: "SE",
      names: {
        en: "Sweden",
        cs: "≈†v√©dsko",
        bg: "–®–≤–µ—Ü–∏—è",
        ru: "–®–≤–µ—Ü–∏—è",
        uk: "–®–≤–µ—Ü—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 30,
      code: "CH",
      names: {
        en: "Switzerland",
        cs: "≈†v√Ωcarsko",
        bg: "–®–≤–µ–π—Ü–∞—Ä–∏—è",
        ru: "–®–≤–µ–π—Ü–∞—Ä–∏—è",
        uk: "–®–≤–µ–π—Ü–∞—Ä—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 31,
      code: "TR",
      names: {
        en: "Turkey",
        cs: "Turecko",
        bg: "–¢—É—Ä—Ü–∏—è",
        ru: "–¢—É—Ä—Ü–∏—è",
        uk: "–¢—É—Ä–µ—á—á–∏–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 32,
      code: "UA",
      names: {
        en: "Ukraine",
        cs: "Ukrajina",
        bg: "–£–∫—Ä–∞–π–Ω–∞",
        ru: "–£–∫—Ä–∞–∏–Ω–∞",
        uk: "–£–∫—Ä–∞—ó–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 33,
      code: "SI",
      names: {
        en: "Slovenia",
        cs: "Slovinsko",
        bg: "–°–ª–æ–≤–µ–Ω–∏—è",
        ru: "–°–ª–æ–≤–µ–Ω–∏—è",
        uk: "–°–ª–æ–≤–µ–Ω—ñ—è"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 34,
      code: "BA",
      names: {
        en: "Bosnia and Herzegovina",
        cs: "Bosna a Hercegovina",
        bg: "–ë–æ—Å–Ω–∞ –∏ –•–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞",
        ru: "–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞",
        uk: "–ë–æ—Å–Ω—ñ—è —ñ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞"
      },
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    }
  ]

  await db.collection('countries').insertMany(countries)
  console.log(`‚úÖ Inserted ${countries.length} countries`)
}

async function insertCities(db) {
  const cities = [
    // Czech Republic
    {
      id: 1,
      countryId: 1,
      names: {
        en: "Prague",
        cs: "Praha",
        bg: "–ü—Ä–∞–≥–∞",
        ru: "–ü—Ä–∞–≥–∞",
        uk: "–ü—Ä–∞–≥–∞"
      },
      variations: ["Prag", "Praga"],
      isActive: true,
      latitude: 50.0755,
      longitude: 14.4378,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 2,
      countryId: 1,
      names: {
        en: "Brno",
        cs: "Brno",
        bg: "–ë—Ä–Ω–æ",
        ru: "–ë—Ä–Ω–æ",
        uk: "–ë—Ä–Ω–æ"
      },
      variations: [],
      isActive: true,
      latitude: 49.1951,
      longitude: 16.6068,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Germany
    {
      id: 3,
      countryId: 2,
      names: {
        en: "Berlin",
        cs: "Berl√≠n",
        bg: "–ë–µ—Ä–ª–∏–Ω",
        ru: "–ë–µ—Ä–ª–∏–Ω",
        uk: "–ë–µ—Ä–ª—ñ–Ω"
      },
      variations: [],
      isActive: true,
      latitude: 52.5200,
      longitude: 13.4050,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 4,
      countryId: 2,
      names: {
        en: "Munich",
        cs: "Mnichov",
        bg: "–ú—é–Ω—Ö–µ–Ω",
        ru: "–ú—é–Ω—Ö–µ–Ω",
        uk: "–ú—é–Ω—Ö–µ–Ω"
      },
      variations: ["M√ºnchen"],
      isActive: true,
      latitude: 48.1351,
      longitude: 11.5820,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Austria
    {
      id: 5,
      countryId: 3,
      names: {
        en: "Vienna",
        cs: "V√≠de≈à",
        bg: "–í–∏–µ–Ω–∞",
        ru: "–í–µ–Ω–∞",
        uk: "–í—ñ–¥–µ–Ω—å"
      },
      variations: ["Wien"],
      isActive: true,
      latitude: 48.2082,
      longitude: 16.3738,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Poland
    {
      id: 6,
      countryId: 4,
      names: {
        en: "Warsaw",
        cs: "Var≈°ava",
        bg: "–í–∞—Ä—à–∞–≤–∞",
        ru: "–í–∞—Ä—à–∞–≤–∞",
        uk: "–í–∞—Ä—à–∞–≤–∞"
      },
      variations: ["Warszawa"],
      isActive: true,
      latitude: 52.2297,
      longitude: 21.0122,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 7,
      countryId: 4,
      names: {
        en: "Krakow",
        cs: "Krakov",
        bg: "–ö—Ä–∞–∫–æ–≤",
        ru: "–ö—Ä–∞–∫–æ–≤",
        uk: "–ö—Ä–∞–∫—ñ–≤"
      },
      variations: ["Krak√≥w", "Cracow"],
      isActive: true,
      latitude: 50.0647,
      longitude: 19.9450,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Hungary
    {
      id: 8,
      countryId: 5,
      names: {
        en: "Budapest",
        cs: "Budape≈°≈•",
        bg: "–ë—É–¥–∞–ø–µ—â–∞",
        ru: "–ë—É–¥–∞–ø–µ—à—Ç",
        uk: "–ë—É–¥–∞–ø–µ—à—Ç"
      },
      variations: [],
      isActive: true,
      latitude: 47.4979,
      longitude: 19.0402,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    // Slovakia
    {
      id: 9,
      countryId: 6,
      names: {
        en: "Bratislava",
        cs: "Bratislava",
        bg: "–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞",
        ru: "–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞",
        uk: "–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞"
      },
      variations: [],
      isActive: true,
      latitude: 48.1486,
      longitude: 17.1077,
      createdAt: new Date(),
      updatedAt: new Date()
    }
  ]

  await db.collection('cities').insertMany(cities)
  console.log(`‚úÖ Inserted ${cities.length} cities`)
}

async function insertCarriers(db) {
  const carriers = [
    {
      id: 1,
      code: "FB",
      name: "FlixBus",
      isExternal: true,
      logoUrl: "https://www.flixbus.com/assets/images/logo.svg",
      website: "https://www.flixbus.com",
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 2,
      code: "BLA",
      name: "BlaBlaCar Bus",
      isExternal: true,
      logoUrl: "https://www.blablacar.com/images/logo.svg",
      website: "https://www.blablacar.com",
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 3,
      code: "ECO",
      name: "Ecolines",
      isExternal: true,
      logoUrl: null,
      website: "https://www.ecolines.net",
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 4,
      code: "SA",
      name: "Student Agency",
      isExternal: true,
      logoUrl: null,
      website: "https://www.studentagency.eu",
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 5,
      code: "EE",
      name: "East Express",
      isExternal: true,
      logoUrl: null,
      website: "http://www.east-express.cz",
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 6,
      code: "ET",
      name: "EuroTours",
      isExternal: false,
      logoUrl: null,
      website: null,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    }
  ]

  await db.collection('carriers').insertMany(carriers)
  console.log(`‚úÖ Inserted ${carriers.length} carriers`)
}

// Run the initialization if this script is called directly
if (process.argv[1] === import.meta.url.replace('file://', '')) {
  initializeDatabase()
    .then(() => {
      console.log('üéâ Database initialization completed successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Database initialization failed:', error)
      process.exit(1)
    })
}

export { initializeDatabase } 